name: Deploy AKCAF-Backend to AWS Lightsail

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: kssia-ecr
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kssia-ecr
          IMAGE_TAG: latest

        run: |
          docker build -t ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Lightsail
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kssia-ecr
          IMAGE_TAG: latest
          LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
          SSH_KEY: ${{ secrets.LIGHTSAIL_PRIVATE_KEY }}
          USERNAME: ubuntu
          PORT: 3003
          CONTAINER_NAME: KSSIA_BACKEND
          ENV_FILE_PATH: /home/ubuntu/kssia/.env/.env.production

        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.LIGHTSAIL_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}

          script: |
            # Update system and install Docker if not installed
            sudo apt-get update
            sudo apt-get install -y docker.io

            # Login to Amazon ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # Pull Docker Image
            sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Stop and remove the existing container if running
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            # Check if the .env.production file exists
            if [ ! -f ${{ env.ENV_FILE_PATH }} ]; then
              echo ".env.production file is missing at ${{ env.ENV_FILE_PATH }}."
              exit 1
            fi

            # Run the new container with the .env.production file
            sudo docker run -d \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --name ${{ env.CONTAINER_NAME }} \
              --env-file ${{ env.ENV_FILE_PATH }} \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}